# -*- coding: utf-8 -*-
"""Hurricane Survival

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eYMfPiv0NQ8p8AmdYdLioTrjx7mCk5He
"""

import numpy as np
import pandas as pd
from numpy import loadtxt
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import OneHotEncoder
import keras
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder

from google.colab import drive
drive.mount('/content/drive')
with open('/content/drive/My Drive/World_MO_Hurricane_Survival.csv', 'r') as f:
  dataset = pd.read_csv(f, delimiter=',')

df = dataset[["DOB","M_STATUS", "SALARY", "EDU_DATA", "EMP_DATA", "GENDER", "DIST_FRM_COAST", "Class"]]
df = df.dropna()


#########################################################
df["DOB"] = pd.to_datetime(df["DOB"])
current_date = pd.to_datetime('now')
df['DOB'] = current_date.year - df['DOB'].dt.year
df = df.rename(columns={'DOB': 'AGE'})

#########################################################
label_encoder = LabelEncoder()
vec = label_encoder.fit_transform(df["M_STATUS"])
vec = tf.keras.utils.to_categorical(vec)
df["MARRIED"] = vec[:, 1:2]
df["UNMARRIED"] = vec[:, 2:]
df["DIVORCED"] = vec[:, 0:1]


#########################################################
replacement_dict = {
    '0-100K': 100000,
    '100k-300k': 300000,
    '300k-500k': 500000,
    '500k-700k': 700000,
    '700k-1 Million': 1000000,
    '1M-2Million' : 2000000
}

df["SALARY"] = df["SALARY"].replace(replacement_dict)

#########################################################
label_encoder = LabelEncoder()
vec6 = label_encoder.fit_transform(df["EMP_DATA"])
vec6 = tf.keras.utils.to_categorical(vec6)
df["EMP_DATA_Employed"] = vec6[:,0:1]
df["EMP_DATA_Self_Employed"] = vec6[:,1]
df["EMP_DATA_Unemployed"] = vec6[:, 2]

#########################################################

replacement_dict = {
    '10-25 KM': 25,
    '60-80 KM': 80,
    '0-10 KM': 10,
    '25-40 KM': 40,
    '40-60 KM': 60
}
df["DIST_FRM_COAST"] = df["DIST_FRM_COAST"].replace(replacement_dict)

#########################################################
vec_gender = label_encoder.fit_transform(df["GENDER"])
vec_gender = tf.keras.utils.to_categorical(vec_gender)
df["FEMALE"] = vec_gender[:,0]
df["MALE"] = vec_gender[:, 1]

#########################################################
vec_ed = label_encoder.fit_transform(df["EDU_DATA"])
vec_ed = tf.keras.utils.to_categorical(vec_ed)
df["Graduate"] = vec_ed[:, 0]
df["High-School"] = vec_ed[:,1]
df["Post-Graduate"] = vec_ed[:,2]
df["Uneducated"] = vec_ed[:,3]

#########################################################
replacement_dict = {
    'x': 1,
    'y': 0
}

df["Class"] = df["Class"].replace(replacement_dict)
#########################################################




df = df.drop('M_STATUS', axis=1)
df = df.drop('GENDER', axis=1)
df = df.drop('EMP_DATA', axis=1)
df = df.drop('EDU_DATA', axis=1)


desired_column_order = [col for col in df.columns if col != 'Class'] + ['Class']
df = df[desired_column_order]


print(df)

X = df.iloc[:,0:-1]
Y = df.iloc[:,-1]


seed = 7
test_size = 0.2
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)

model = XGBClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
predictions = [round(value) for value in y_pred]
accuracy = accuracy_score(y_test, predictions)
print("Accuracy: %.2f%%" % (accuracy * 100.0))